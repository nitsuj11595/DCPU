;;; HelloWorld.dasm16
;;; Copyright 26XX (c) nitsuj11595
;;; 
;;; Basic hello world program
;;; Requires either a LEM or Pixie monitor
;;; 
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;; 
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

	;; Jump to main code
	SET	PC, MAIN

;;; Definitions
:MONITOR_LEM
	DAT	0xF615, 0x734D ;id for LEM monitor
:MONITOR_PIXIE
	DAT	0xF615, 0x774D ;id for PIXIE monitor
:HELLO
	DAT	"Hello World!" 0x0000

;;; Variables
:MONITOR
	DAT	0xFFFF, 0xFFFF, 0xFFFF ;Default Monitor (#, id A, id B)

;;; Main code
:MAIN
	JSR	GetMonitor

	SET	A, 0
	SET	B, VIDEORAM_START
	HWI	[MONITOR] ;Map videoram to end of program

	SET	A, HELLO
	SET	B, VIDEORAM_START
	JSR	String_copy ;Copy a string
	
:HALT
	SET	PC, HALT ;Loop Forever

:GetMonitor
;;; Finds the first avaliable monitor
;;; Stores # and id at MONITOR
;;; Clobbered Registers: A, B, C, I, X, Y
	HWN	I ;Set I to # of last connected device +1
	
	:GetMonitor_loop
	SUB	I, 1 ;Pre Decrement
	IFE	I, 0xFFFF ;Exit when I is -1
	SET	PC, POP
	
	HWQ	I
	;; Add LEM
	IFE	A, [MONITOR_LEM+0]
	IFE	B, [MONITOR_LEM+1]
	JSR	GetMonitor_LEM
	;; Add PIXIE
	IFE	A, [MONITOR_PIXIE+0]
	IFE	B, [MONITOR_PIXIE+1]
	JSR	GetMonitor_PIXIE

	SET	PC, GetMonitor_loop

:GetMonitor_LEM
	SET	[MONITOR], I	
	SET	[MONITOR+1], A
	SET	[MONITOR+2], B
	SET	PC, POP
	
:GetMonitor_PIXIE
	SET	[MONITOR], I
	SET	[MONITOR+1], A
	SET	[MONITOR+2], B
	SET	PC, POP

:String_copy
;;; Copies a null termintated string from A to B
;;; Clobbered Registers: A, B, I, J
	SET	I, A
	SET	J, B
	
	:String_copy_loop
	IFE	[I], 0x0000 ;Exit on null character
	SET	PC, POP

	STI	[J], [I] ;Copy a character
	BOR	[J-1], 0xF000 ;Apply formatting
	
	SET	PC, String_copy_loop
	
:VIDEORAM_START
